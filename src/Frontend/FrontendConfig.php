<?php declare(strict_types=1);

namespace Lentille\SymfonyBundle\Frontend;

use Lentille\SymfonyBundle\Frontend\ConfigEntry\ConfigEntryInterface;
use Symfony\Component\Config\ConfigCacheFactory;
use Symfony\Component\Config\ConfigCacheFactoryInterface;
use Symfony\Component\Config\ConfigCacheInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\DependencyInjection\Attribute\TaggedIterator;
use Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerInterface;

class FrontendConfig implements CacheWarmerInterface {
	private readonly ConfigCacheFactoryInterface $configCacheFactory;
	private static ?array $cache = [];

	public function __construct(
		#[Autowire('%kernel.debug%')] bool $isDebug,
		#[Autowire('%kernel.cache_dir%')] private string $cacheDir,
		#[TaggedIterator('lentille.frontend_config.entry')] private readonly iterable $entries,
		private readonly array $instances = ['main']
	) {
		$this->configCacheFactory = new ConfigCacheFactory($isDebug);
	}

	public function getConfig(string $instance): array {
		if(!in_array($instance, $this->instances)) {
			throw new \InvalidArgumentException('Unknown instance');
		}
		$cache = $this->configCacheFactory->cache(
			$this->cacheDir."/frontend_config+{$instance}.php",
			fn(ConfigCacheInterface $cache) => $cache->write($this->dumpConfig($instance))
		);
		return $this->getCompiledConfig($cache->getPath());
	}

	public function warmUp(string $cacheDir): array {
		$oldCache = $this->cacheDir;
		$this->cacheDir = $cacheDir;

		foreach($this->instances as $i) $this->getConfig($i);

		$this->cacheDir = $oldCache;
		return [];
	}

	public function isOptional(): bool {
		return false;
	}

	private function dumpConfig(string $instance): string {
		$vars = [];
		/** @var ConfigEntryInterface $entry */
		foreach($this->entries as $entry) {
			$vars += $entry->getConfig($instance);
		}
		$vars = var_export($vars, true);
		$version = hash('xxh64', $vars);
		return <<<EOF
<?php // This file has been auto-generated by the Lentille Symfony Bundle.
// Frontend instance: $instance 
return ['$version', $vars];
EOF;
	}

	private function getCompiledConfig(string $path): array {
		if(
			[] === self::$cache &&
			\function_exists('opcache_invalidate') &&
			filter_var(ini_get('opcache.enable'), \FILTER_VALIDATE_BOOLEAN) &&
			(!\in_array(\PHP_SAPI, ['cli', 'phpdbg'], true) || filter_var(ini_get('opcache.enable_cli'), \FILTER_VALIDATE_BOOLEAN))
		) {
			self::$cache = null;
		}

		if(null === self::$cache) {
			return require $path;
		}

		return self::$cache[$path] ??= require $path;
	}
}
